{"version":3,"sources":["SearchBar.js","Gifs.js","DisplayGifs.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchValue","onChange","event","setState","target","value","handleSubmit","preventDefault","props","onSearch","className","htmlFor","name","type","placeholder","this","onClick","id","Component","Gifs","src","url","alt","DisplayGifs","data","map","gif","images","fixed_height","App","performSearch","searchQuery","axios","method","responseType","params","api_key","q","limit","rating","lang","random_id","then","response","console","log","gifs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4SA8CeA,E,4MA1CXC,MAAQ,CACJC,YAAa,I,EAOjBC,SAAW,SAACC,GACR,EAAKC,SAAS,CACVH,YAAaE,EAAME,OAAOC,S,EAIlCC,aAAe,SAACJ,GACZA,EAAMK,iBACN,EAAKC,MAAMC,SAAS,EAAKV,MAAMC,c,uDAGzB,IAAD,OACL,OACI,0BAAMU,UAAU,aACZ,2BAAOC,QAAQ,WACf,yBAAKD,UAAU,iBACX,2BACIE,KAAK,SACLC,KAAK,OACLC,YAAY,eACZb,SAAYc,KAAKd,SACjBI,MAASU,KAAKhB,MAAMC,cAExB,4BACIgB,QAAU,SAACd,GACP,EAAKM,MAAMC,SAASP,EAAO,EAAKH,MAAMC,cAE1Ca,KAAK,SAASI,GAAG,aAAY,uBAAGA,GAAG,OAAOP,UAAU,wB,GArCpDQ,aCMTC,EANF,SAACX,GAAD,OACT,wBAAIE,UAAU,UACV,yBAAKU,IAAKZ,EAAMa,IAAKC,IAAI,OCWlBC,EAZK,SAACf,GACjB,OACI,wBAAIE,UAAU,UACTF,EAAMgB,KAAKC,KAAI,SAAAC,GACZ,OACA,kBAAC,EAAD,CAAML,IAAKK,EAAIC,OAAOC,aAAaP,WC4CpCQ,G,wDA5Cb,aAAc,IAAD,8BACX,gBAMFC,cAAgB,SAAC5B,EAAO6B,GACtB7B,EAAMK,iBACNyB,IAAM,CACJX,IAAI,sCACJY,OAAO,MACPC,aAAa,OACbC,OAAQ,CACNC,QAAQ,mCACRC,EAAGN,EACHO,MAAM,MACNC,OAAO,IACPC,KAAK,KACLC,UAAU,MAEXC,MAAK,SAACC,GACPC,QAAQC,IAAIF,GACZA,EAAWA,EAASnB,KAAKA,KACzB,EAAKrB,SAAS,CACZ2C,KAAMH,QAvBV,EAAK5C,MAAQ,CACX+C,KAAM,IAHG,E,qDAgCX,OACE,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAWD,SAAUM,KAAKe,gBAC1B,kBAAC,EAAD,CAAaN,KAAMT,KAAKhB,MAAM+C,OAC9B,0D,GAvCQ5B,cCME6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.dcf34ebf.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SearchBar extends Component {\n\n    state = {\n        searchValue: \"\"\n    }\n\n    //onSearch = (event) => {\n        //this.setState({ searchValue: event.target.searchValue });\n    //}\n\n    onChange = (event) => {\n        this.setState({\n            searchValue: event.target.value\n        })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.onSearch(this.state.searchValue)\n    }\n\n    render() {\n        return (\n            <form className=\"searchBar\">\n                <label htmlFor=\"search\"></label>\n                <div className=\"searchBarWrap\">\n                    <input \n                        name=\"search\"\n                        type=\"text\" \n                        placeholder=\"Search GIPHY\" \n                        onChange = {this.onChange} \n                        value = {this.state.searchValue} //this double binds. if somehow state changes my value wont be left behind \n                    />\n                    <button \n                        onClick={ (event) => {\n                            this.props.onSearch(event, this.state.searchValue);\n                        } }\n                        type=\"submit\" id=\"searchBtn\"><i id=\"icon\" className=\"fa fa-search\"></i></button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\n\nconst Gifs = (props) => (\n    <li className=\"gifsLi\">\n        <img src={props.url} alt=\"\"/>\n    </li>\n)\n\nexport default Gifs;","import React from 'react';\nimport Gifs from './Gifs';\n\nconst DisplayGifs = (props) => {\n    return(\n        <ul className=\"gifsUl\">\n            {props.data.map(gif => {\n                return(\n                <Gifs url={gif.images.fixed_height.url} />\n                )\n            })}\n        </ul>\n    );\n}\n\nexport default DisplayGifs;\n    \n\n\n\n\n// const results = props.data;\n    // let gifs = results.map(gifs => \n    //     <Gifs url={gifs.images.fixed_height.url} key={gifs.id} />\n    // );\n\n/* class GifList extends Component {\n    state = {\n        gifs: []\n    };\n\n    render() {\n        const { gifs } = this.state;\n        return (\n            <ul className=\"resultList\">{gifs}</ul>\n        )\n    }\n}   */  ","import React, { Component } from 'react';\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport DisplayGifs from './DisplayGifs';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      gifs: []\n    }\n  }\n\n  performSearch = (event, searchQuery) => { //or componentDidMount()??\n    event.preventDefault();\n    axios({\n      url: `http://api.giphy.com/v1/gifs/search`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        api_key: `eXvQjN8uvGbrhm7fuMlAGjG1deihdFcj`,\n        q: searchQuery,\n        limit: `100`,\n        rating: `g`,\n        lang:  `en`,\n        random_id: ``\n      }\n    }).then((response) => {\n      console.log(response); //.data.data.url?\n      response = response.data.data\n      this.setState({\n        gifs: response\n      })\n    })\n  }\n\n  render() {\n    //console.log(this.state.gifs)\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <SearchBar onSearch={this.performSearch} /> \n          <DisplayGifs data={this.state.gifs} />\n          <footer>Powered By GIPHY</footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}