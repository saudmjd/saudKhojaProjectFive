{"version":3,"sources":["SearchBar.js","Gifs.js","GifList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchValue","onSearchChange","e","setState","target","value","handleSubmit","preventDefault","props","onSearch","currentTarget","reset","className","onSubmit","this","htmlFor","name","type","placeholder","onChange","id","Component","Gifs","src","url","alt","GifList","gifs","data","map","images","fixed_height","key","App","query","axios","get","then","res","catch","error","console","log","performSearch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4SAkCeA,G,kNA9BXC,MAAQ,CACJC,YAAa,I,EAGjBC,eAAiB,SAAAC,GACb,EAAKC,SAAS,CAAEH,YAAaE,EAAEE,OAAOC,S,EAG1CC,aAAe,SAAAJ,GACXA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKV,MAAMC,aAC/BE,EAAEQ,cAAcC,S,uDAIhB,OACI,0BAAMC,UAAU,YAAYC,SAAUC,KAAKR,cACvC,2BAAOS,QAAQ,WACf,2BACIC,KAAK,SACLC,KAAK,SACLC,YAAY,eACZC,SAAYL,KAAKb,iBAErB,4BAAQgB,KAAK,SAASG,GAAG,aAAY,uBAAGA,GAAG,OAAOR,UAAU,uB,GA1BpDS,cCMTC,EANF,SAAAd,GAAK,OACd,wBAAII,UAAU,QACV,yBAAKW,IAAKf,EAAMgB,IAAKC,IAAI,OCalBC,EAdC,SAAAlB,GAEZ,IACImB,EADYnB,EAAMoB,KACHC,KAAI,SAAAF,GAAI,OACvB,kBAAC,EAAD,CAAMH,IAAKG,EAAKG,OAAOC,aAAaP,IAAKQ,IAAKL,EAAKP,QAGvD,OACI,wBAAIR,UAAU,cACTe,ICiCEM,E,kDApCb,aAAc,IAAD,8BACX,gBACKlC,MAAQ,CACX4B,KAAM,IAHG,E,4DAOc,IAAD,OAAZO,EAAY,uDAAJ,GACpBC,IAAMC,IAAN,yFAA4FF,EAA5F,wCACGG,MAAK,SAAAC,GACJ,EAAKnC,SAAS,CACZwB,KAAMW,EAAIV,KAAKA,UAGlBW,OAAM,SAAAC,GACLC,QAAQC,IAAI,QAASF,Q,+BAMzB,OADAC,QAAQC,IAAI5B,KAAKf,MAAM4B,MAEnB,yBAAKf,UAAU,OACb,6BACE,kBAAC,EAAD,CAAWH,SAAUK,KAAK6B,iBAG5B,yBAAK/B,UAAU,WACb,kBAAC,EAAD,CAASgB,KAAMd,KAAKf,MAAM4B,a,GA9BpBN,aCKEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMmB,c","file":"static/js/main.23632558.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SearchBar extends Component {\n\n    state = {\n        searchValue: ''\n    }\n\n    onSearchChange = e => {\n        this.setState({ searchValue: e.target.value });\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.onSearch(this.state.searchValue)\n        e.currentTarget.reset();\n    }\n\n    render() {\n        return (\n            <form className=\"searchBar\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"search\"></label>\n                <input \n                    name=\"search\"\n                    type=\"search\" \n                    placeholder=\"Search GIPHY\" \n                    onChange = {this.onSearchChange} \n                />\n                <button type=\"submit\" id=\"searchBtn\"><i id=\"icon\" className=\"fa fa-search\"></i></button>\n            </form>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\n\nconst Gifs = props => (\n    <li className=\"gifs\">\n        <img src={props.url} alt=\"\"/>\n    </li>\n)\n\nexport default Gifs;\n\n\n\n\n\n\n\n\n\n\n\n/* class Gifs extends Component {\n    render() {\n        return(\n            <li>\n                <img src={this.state.url} alt=\"\"/>\n            </li>\n        )\n    }\n} */","import React from 'react';\nimport Gifs from './Gifs';\n\nconst GifList = props => {\n\n    const results = props.data;\n    let gifs = results.map(gifs => \n        <Gifs url={gifs.images.fixed_height.url} key={gifs.id} />\n    );\n\n    return(\n        <ul className=\"gifResults\">\n            {gifs}\n        </ul>\n    );\n}\n\nexport default GifList;\n    \n\n\n\n\n\n\n/* class GifList extends Component {\n    state = {\n        gifs: []\n    };\n\n    render() {\n        const { gifs } = this.state;\n        return (\n            <ul className=\"resultList\">{gifs}</ul>\n        )\n    }\n}   */  ","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport SearchBar from './SearchBar';\nimport GifList from './GifList';\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      gifs: []\n    }\n  }\n\n  performSearch(query = '') {\n    axios.get(`http://api.giphy.com/v1/gifs/search?api_key=vprTsokUFbIv0VBPjw5XYpUlAi2UfgtV&q=${query}&limit=50&offset=0&rating=g&lang=en`)\n      .then(res => {\n        this.setState({\n          gifs: res.data.data\n        });\n      })\n      .catch(error => {\n        console.log('ERROR', error);\n      });\n  }\n\n  render() {\n    console.log(this.state.gifs)\n    return (\n        <div className=\"App\">\n          <div>\n            <SearchBar onSearch={this.performSearch}/> \n          </div>\n\n          <div className=\"content\">\n            <GifList data={this.state.gifs} />\n          </div>\n        </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}